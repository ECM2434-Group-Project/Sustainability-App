import React, { useEffect, useState } from "react";
import { AnswerButton } from "../../components/Quiz/AnswerButton";
import { SubmitButton } from "../../components/Quiz/SubmitButton";
import { NextQuizButton } from "../../components/Quiz/NextQuizButton";
import axios from "axios";
import { useNavigate, useLocation } from "react-router-dom";

axios.defaults.xsrfCookieName = 'csrftoken';
axios.defaults.xsrfHeaderName = 'X-CSRFToken';
axios.defaults.withCredentials = true;

const client = axios.create({
    baseURL: "http://" + process.env.REACT_APP_BACKEND_HOSTNAME + ":8000"
})

/**
 * the quiz page, shows the user with questions generated by the backend
 * allows the user to answer the questions and submit them to the backend
 * 
 * @returns a quiz page
 */
export default function Quiz() {
    // TODO: Remove with the backend questions, restructure to adapt to the backend
    const [questions, setQuestions] = useState([]);

    // state to keep track of if the user has selected an answer
    const [selected, setSelected] = useState(0)

    // which question is the user on
    const [page, setPage] = useState(0)

    const [answers, setAnswers] = useState([]);

    const nav = useNavigate();
    const location = useLocation();
    
    useEffect(() => {
        setSelected(0)        
    }, [page]);

    useEffect(() => {
        client.get("/api/quiz").then((response) => {
            setQuestions(response.data);
        })
    }, []);

    useEffect(() => {
        if (answers.length !== 3) {
            return;
        }

        const quiz = [];
        for (let i = 0; i < questions.length; i++) {
            quiz.push({question_id: questions[i].question_id, answer_id: answers[i]});
        }

        const req = {
            latitude: location.state.latitude,
            longitude: location.state.longitude,
            vendor_id: location.state.vendorID,
            bag_group: location.state.groupID,
            quiz: quiz
        }
        console.log(JSON.stringify(req));
        client.post("/api/quiz", req).then((response) => {
            console.log(response.data);
            if (response.data.message === "You have answered a question incorrectly") {
                nav("/quiz/incorrect");
            } else if (response.status === 418) {
                nav("/outlet/"+location.state.vendorID);
            } else if (response.data.message === "You are not in the correct location to submit a quiz, you need to be on site to submit a quiz (500m from vendor)"){
                nav("/incorrect-location");
            } else if (response.data.message === "Claim created successfully") {
                nav("/quiz/complete");
            }
        }).catch((error) => {
            console.log(error);
        }
        )
    }, [answers]);

    if (questions.length === 0) {
        return <div>Loading...</div>
    }
    if (page === 0) {
        return (
            <div className="flex flex-col justify-between h-full p-4">
                    <div className="flex flex-col gap-4">
                        <div>
                            <h1 className="text-2xl font-semibold">Quiz</h1>
                            <p>{questions[0] ? questions[0].question : "not yet loaded in"}</p>
                        </div>
    
                        {
                            questions[0] ? (
                                questions[0].answers.map((answer, index) => (
                                    <AnswerButton key={answer.answer_id} index={answer.answer_id}  selected={selected} answer={answer.answer} setSelected={setSelected}/>
                                ))
                            ) : (
                                <>not loaded in yet</>
                            )
                        }
                    </div>
    
                    <div>
                        <NextQuizButton disabled={!selected} setPage={setPage} setAnswer={setAnswers} answer={selected}/>
                    </div>
            </div>
                
        )
    } else if (page === 1) {
        return (
            <div className="flex flex-col justify-between h-full p-4">
                    <div className="flex flex-col gap-4">
                        <div>
                            <h1 className="text-2xl font-semibold">Quiz</h1>
                            <p>{questions[1] ? questions[1].question : "not yet loaded in"}</p>
                        </div>
    
                        {
                            questions[1] ? (
                                questions[1].answers.map((answer, index) => (
                                    <AnswerButton key={answer.answer_id} index={answer.answer_id}  selected={selected} answer={answer.answer} setSelected={setSelected}/>
                                ))
                            ) : (
                                <>not loaded in yet</>
                            )
                        }
                    </div>
    
                    <div>
                        <NextQuizButton disabled={!selected} setPage={setPage} setAnswer={setAnswers} answer={selected}/>
                    </div>
            </div>
                
        )
    } else if (page === 2) {
        return (
            <div className="flex flex-col justify-between h-full p-4">
                    <div className="flex flex-col gap-4">
                        <div>
                            <h1 className="text-2xl font-semibold">Quiz</h1>
                            <p>{questions[2] ? questions[2].question : "not yet loaded in"}</p>
                        </div>
    
                        {
                            questions[2] ? (
                                questions[2].answers.map((answer, index) => (
                                    <AnswerButton key={answer.answer_id} index={answer.answer_id} selected={selected} answer={answer.answer} setSelected={setSelected} />
                                ))
                            ) : (
                                <>not loaded in yet</>
                            )
                        }
                    </div>
    
                    <div>
                        <SubmitButton disabled={!selected} setAnswer={setAnswers} answer={selected}/>
                    </div>
            </div>
        )
    }
     
}